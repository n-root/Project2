---
title: "Project2"
format: html
editor: visual
---

#### Note to self: I have chosen 'Open-Meteo' as my API

## Establish Libraries

```{r}
library(tidyverse)
library(tibble)
library(ggplot2)
library(httr)
library(jsonlite)
library(knitr)
```

## Write a Function That Contacts the API and is Customizable

```{r}
# Function with cutomizable options
get_OMdata <- function(latitude, longitude, start_date, end_date, variables = c("temperature_2m", "precipitation"), timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    hourly = paste(variables, collapse = ","),
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC"))
  
  # Loop through each variable and add each to the tibble
  for (variable in variables) {
    df[[variable]] <- hourly_data[[variable]]
  }
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df)
  
}
```


## Function 1: Querying current weather data

```{r}
# Function with cutomizable options
get_current_weather <- function(latitude, longitude, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  current_data <- OMdata$current
  
  # Format the data
  df_current <- tibble(
    time = as.POSIXct(current_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone),
    temperature = current_data$temperature,
    windspeed = current_data$windspeed
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_current)
  
}
```


## Function 2: Querying hourly weather data

```{r}
# Function with cutomizable options
get_hourly_forecast <- function(latitude, longitude, start_date, end_date, variables = c("temperature_2m", "precipitation"), timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    hourly = paste(variables, collapse = ","),
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df_hourly <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone)
  )
  
  # Loop through each variable and add each to the tibble
  for (variable in variables) {
    df_hourly[[variable]] <- hourly_data[[variable]]
  }
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_hourly)
  
}
```


## Function 3: Querying daily weather data

```{r}
# Function with cutomizable options
get_daily_forecast <- function(latitude, longitude, start_date, end_date, variables = c("temperature_2m", "temperature_2m_min", "precipitation_sum"), timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    daily = paste(variables, collapse = ","),
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  daily_data <- OMdata$daily
  
  # Format the data
  df_daily <- tibble(
    date = as.Date(daily_data$time)
  )
  
  # Loop through each variable and add each to the tibble
  for (variable in variables) {
    df_daily[[variable]] <- daily_data[[variable]]
  }
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_daily)
  
}
```


## Function 4: Querying historical weather data

```{r}
# Function with cutomizable options
get_historical_weather <- function(latitude, longitude, start_date, end_date, variables = c("temperature_2m", "precipitation"), timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    hourly = paste(variables, collapse = ","),
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df_historical <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone)
  )
  
  # Loop through each variable and add each to the tibble
  for (variable in variables) {
    df_historical[[variable]] <- hourly_data[[variable]]
  }
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_historical)
  
}
```

#### Allow the user to request >= 6 different types of data


#### Return well-formatted, parsed data in the form of a tibble


## Produce common numerical summaries

#### Contingency tables


## Produce common graphical summaries

#### Plot 1


#### Plot 2


#### Plot 3


#### Plot 4


# The App

## About Tab

#### Describe the purpose of the app


#### Discuss the data and its source with a link


#### Discuss the purpose of each tab


#### Include a picture of


## Data Download Tab

#### Allow the user to specify changes


#### Display the returned data


#### Subset the data set


#### Save the data as a file


## Data Exploration Tab

#### Allow the user to choose variables/combinations that are summarized via numerical/graphical summaries


## Two dynamic UI elements

