---
title: "Project2"
format: html
editor: visual
---

#### Note to self: I have chosen 'Open-Meteo' as my API

## Establish Libraries

```{r}
library(tidyverse)
library(dplyr)
library(tibble)
library(ggplot2)
library(httr)
library(jsonlite)
library(knitr)
```

## Write a Function That Contacts the API and is Customizable

```{r}
# Function with cutomizable options
get_OMdata <- function(latitude, longitude, start_date, end_date, variables = c("temperature_2m", "precipitation"), timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    hourly = paste(variables, collapse = ","),
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC"))
  
  # Loop through each variable and add each to the tibble
  for (variable in variables) {
    df[[variable]] <- hourly_data[[variable]]
  }
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df)
  
}
```


## Function 1: Querying Current Weather Data

```{r}
# Function with cutomizable options
get_current_weather <- function(latitude, longitude, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  current_data <- OMdata$current
  
  # Format the data
  df_current <- tibble(
    time = as.POSIXct(current_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone),
    temperature = current_data$temperature,
    windspeed = current_data$windspeed
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_current)
  
}
```


## Function 2: Querying Wind Speed Data

```{r}
# Function with cutomizable options
get_wind_speed <- function(latitude, longitude, start_date, end_date, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    hourly = "windspeed_10m",
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df_wind_speed <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone), windspeed_10m = hourly_data$windspeed_10m
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_wind_speed)
  
}
```


## Function 3: Querying Daily Weather Data

```{r}
# Function with cutomizable options
get_daily_forecast <- function(latitude, longitude, start_date, end_date, variables = c("temperature_2m", "temperature_2m_min", "precipitation_sum"), timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    daily = paste(variables, collapse = ","),
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  daily_data <- OMdata$daily
  
  # Format the data
  df_daily <- tibble(
    date = as.Date(daily_data$time)
  )
  
  # Loop through each variable and add each to the tibble
  for (variable in variables) {
    df_daily[[variable]] <- daily_data[[variable]]
  }
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_daily)
  
}
```


## Function 4: Querying Weather Conditions

```{r}
# Function with cutomizable options
get_weather_conditions <- function(latitude, longitude, start_date, end_date, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    weather = "weather_description",
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  weather_desc_data <- OMdata$weather
  
  # Format the data
  df_weather_condition <- tibble(
    time = as.POSIXct(weather_desc_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone), weather_description = weather_desc_data$weather_description
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_weather_condition)
  
}
```


## Function 5: Querying Air Quality Data

```{r}
# Function with cutomizable options
get_air_quality <- function(latitude, longitude, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df_air_quality <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone),
    pm10 = hourly_data$pm10,
    pm2_5 = hourly_data$pm2_5,
    o3 = hourly_data#o3
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_air_quality)
  
}
```


## Function 6: Querying Weather Alerts

```{r}
# Function with cutomizable options
get_weather_alerts <- function(latitude, longitude) {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  alert_data <- OMdata$alerts
  
  # Format the data
  df_weather_alerts <- tibble(
    time = as.POSIXct(sapply(alert_data, function(x) x$time), format = "%Y-%m-%dT%H:%M:%SZ"), event = sapply(alert_data, function(x) x$event), description = sapply(alert_data, function(x) x$description)
                      )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_weather_alerts)
  
}
```

## Produce common numerical summaries

#### Contingency table

```{r}
# Collect data using weather description function
weather_desc_data2 <- get_weather_conditions(30.2672, 97.7431, "2023-07-07T00:00:00Z", "2023-07-08T00:00:00Z")

# Create contingency table
contingency_table <- table(weather_desc_data2)

# Print contingency table
contingency_table
```
#### Numerical Summary of Wind Speed

```{r}
# Collect data using wind speed function
wind_speed_data <- get_wind_speed(30.2672, 97.7431, "2023-07-07T00:00:00Z", "2023-07-08T00:00:00Z")

# Create numerical summary
wind_speed_summary <- wind_speed_data %>%
  left_join(weather_desc_data2, by = "time") %>%
  group_by(weather_description) %>%
  summarize(
    mean_wind_speed = mean(windspeed_10m, na.rm = TRUE),
    sd_wind_speed = sd(windspeed_10m, na.rm = TRUE),
    median_wind_speed = median(windspeed_10m, na.rm = TRUE),
    min_wind_speed = min(windspeed_10m, na.rm = TRUE),
    max_wind_speed = max(windspeed_10m, na.rm = TRUE)
  )

# Print numerical summary
wind_speed_summary
```

## Produce common graphical summaries

#### Plot 1: Line Plot

```{r}
ggplot(wind_speed_data, aes(x = time, y = windspeed_10m, color = as.factor(weather_desc_data2$weather_description))) + geom_line() + labs(title = "Wind Speed Over Time", x = "Time", y = "Wind Speed (m/s)", color = "Weather Description")
```


#### Plot 2: Box Plot

```{r}
ggplot(wind_speed_data %>% left_join(weather_desc_data2, by = "time"), aes(x = weather_description, y = windspeed_10m, fill = weather_description)) + geom_boxplot() + labs(title = "Wind Speed Distribution by Weather Description", x = "Weather Description", y = "Wind Speed (m/s)") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


#### Plot 3: Bar Plot
```{r}
ggplot(wind_speed_data %>% left_join(weather_desc_data2, by = "time"), aes(x = weather_description, y = windspeed_10m, fill = weather_description)) + geom_boxplot() + labs(title = "Wind Speed Distribution by Weather Description", x = "Weather Description", y = "Wind Speed (m/s)") + theme(axis.text.x = element_text(angle = 45, hjust =1))
```


#### Plot 4: Heatmap of Wind Speed by Hour and Weather Description

```{r}
wind_speed_data$hour <- format(wind_speed_data$time, "%H")

heatmap_wind_data <- wind_speed_data %>%
  left_join(weather_desc_data2, by = "time") %>%
  group_by(hour, weather_description) %>%
  summarize(mean_wind_speed = mean(windspeed_10m, na.rm = TRUE)) %>%
  spread(weather_description, mean_wind_speed)

heatmap_wind <- as.matrix(heatmap_wind_data[-1])
rownames(heatmap_wind) <- heatmap_wind_data$hour
heatmap_wind_melted <- melt(heatmap_wind, varnames = c("Hour", "Weather Description"), value.name =)
```


# The App

## About Tab

#### Describe the purpose of the app


#### Discuss the data and its source with a link


#### Discuss the purpose of each tab


#### Include a picture of


## Data Download Tab

#### Allow the user to specify changes


#### Display the returned data


#### Subset the data set


#### Save the data as a file


## Data Exploration Tab

#### Allow the user to choose variables/combinations that are summarized via numerical/graphical summaries


## Two dynamic UI elements

