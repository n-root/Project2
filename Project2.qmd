---
title: "Project2"
format: html
editor: visual
---

#### Note to self: I have chosen 'Open-Meteo' as my API

## Establish Libraries

```{r}
library(tidyverse)
library(dplyr)
library(tibble)
library(ggplot2)
library(httr)
library(jsonlite)
library(knitr)
library(shiny)
library(shinydashboard)
library(reshape2)
library(DT)
```

## Write a Function That Contacts the API and is Customizable

```{r}
# Function with cutomizable options
get_OMdata <- function(latitude, longitude, start_date, end_date, variables = c("temperature_2m", "precipitation"), timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    hourly = paste(variables, collapse = ","),
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC"))
  
  # Loop through each variable and add each to the tibble
  for (variable in variables) {
    df[[variable]] <- hourly_data[[variable]]
  }
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df)
  
}
```


## Function 1: Querying Current Weather Data

```{r}
# Function with cutomizable options
get_current_weather <- function(latitude, longitude, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  current_data <- OMdata$current
  
  # Format the data
  df_current <- tibble(
    time = as.POSIXct(current_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone),
    temperature = current_data$temperature,
    windspeed = current_data$windspeed
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_current)
  
}
```


## Function 2: Querying Wind Speed Data

```{r}
# Function with cutomizable options
get_wind_speed <- function(latitude, longitude, start_date, end_date, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    hourly = "windspeed_10m",
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df_wind_speed <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone), windspeed_10m = hourly_data$windspeed_10m
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_wind_speed)
  
}
```


## Function 3: Querying Daily Weather Data

```{r}
# Function with cutomizable options
get_daily_forecast <- function(latitude, longitude, start_date, end_date, variables = c("temperature_2m", "temperature_2m_min", "precipitation_sum"), timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    daily = paste(variables, collapse = ","),
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  daily_data <- OMdata$daily
  
  # Format the data
  df_daily <- tibble(
    date = as.Date(daily_data$time)
  )
  
  # Loop through each variable and add each to the tibble
  for (variable in variables) {
    df_daily[[variable]] <- daily_data[[variable]]
  }
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_daily)
  
}
```


## Function 4: Querying Weather Conditions

```{r}
# Function with cutomizable options
get_weather_conditions <- function(latitude, longitude, start_date, end_date, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    start = start_date,
    end = end_date,
    weather = "weather_description",
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  weather_desc_data <- OMdata$weather
  
  # Format the data
  df_weather_condition <- tibble(
    time = as.POSIXct(weather_desc_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone), weather_description = weather_desc_data$weather_description
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_weather_condition)
  
}
```


## Function 5: Querying Air Quality Data

```{r}
# Function with cutomizable options
get_air_quality <- function(latitude, longitude, timezone = "UTC") {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude,
    timezone = timezone
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  hourly_data <- OMdata$hourly
  
  # Format the data
  df_air_quality <- tibble(
    time = as.POSIXct(hourly_data$time, format = "%Y-%m-%dT%H:%M:%SZ", tz = timezone),
    pm10 = hourly_data$pm10,
    pm2_5 = hourly_data$pm2_5,
    o3 = hourly_data#o3
  )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_air_quality)
  
}
```


## Function 6: Querying Weather Alerts

```{r}
# Function with cutomizable options
get_weather_alerts <- function(latitude, longitude) {
  
  # Identify Open-Meteo API link
  web_URL <- "https://api.open-meteo.com/v1/forecast"
  
  # Establish parameters
  params <- list(
    latitude = latitude,
    longitude = longitude
  )
  
  # GET request
  response <- GET(web_URL, query = params)
  
  # Check GET request
  if (status_code(response) != 200) {
    stop("Failed request")
  }
  
  # Parse the data
  OMdata <- fromJSON(content(response, "text", encoding = "UTF-8"))
  
  # Extract the data
  alert_data <- OMdata$alerts
  
  # Format the data
  df_weather_alerts <- tibble(
    time = as.POSIXct(sapply(alert_data, function(x) x$time), format = "%Y-%m-%dT%H:%M:%SZ"), event = sapply(alert_data, function(x) x$event), description = sapply(alert_data, function(x) x$description)
                      )
  
  # Return well-formatted, parsed data in the form of a tibble
  return(df_weather_alerts)
  
}
```

## Produce common numerical summaries

#### Contingency table

```{r}
# Collect data using weather description function
weather_desc_data2 <- get_weather_conditions(30.2672, 97.7431, "2023-07-07T00:00:00Z", "2023-07-08T00:00:00Z")

# Create contingency table
contingency_table <- table(weather_desc_data2)

# Print contingency table
contingency_table
```
#### Numerical Summary of Wind Speed

```{r}
# Collect data using wind speed function
wind_speed_data <- get_wind_speed(30.2672, 97.7431, "2023-07-07T00:00:00Z", "2023-07-08T00:00:00Z")

# Create numerical summary
wind_speed_summary <- wind_speed_data %>%
  left_join(weather_desc_data2, by = "time") %>%
  group_by(weather_description) %>%
  summarize(
    mean_wind_speed = mean(windspeed_10m, na.rm = TRUE),
    sd_wind_speed = sd(windspeed_10m, na.rm = TRUE),
    median_wind_speed = median(windspeed_10m, na.rm = TRUE),
    min_wind_speed = min(windspeed_10m, na.rm = TRUE),
    max_wind_speed = max(windspeed_10m, na.rm = TRUE)
  )

# Print numerical summary
wind_speed_summary
```

## Produce common graphical summaries

#### Plot 1: Line Plot

```{r}
ggplot(wind_speed_data, aes(x = time, y = windspeed_10m, color = as.factor(weather_desc_data2$weather_description))) + geom_line() + labs(title = "Wind Speed Over Time", x = "Time", y = "Wind Speed (m/s)", color = "Weather Description")
```


#### Plot 2: Box Plot

```{r}
ggplot(wind_speed_data %>% left_join(weather_desc_data2, by = "time"), aes(x = weather_description, y = windspeed_10m, fill = weather_description)) + geom_boxplot() + labs(title = "Wind Speed Distribution by Weather Description", x = "Weather Description", y = "Wind Speed (m/s)") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


#### Plot 3: Bar Plot
```{r}
ggplot(wind_speed_data %>% left_join(weather_desc_data2, by = "time"), aes(x = weather_description, y = windspeed_10m, fill = weather_description)) + geom_boxplot() + labs(title = "Wind Speed Distribution by Weather Description", x = "Weather Description", y = "Wind Speed (m/s)") + theme(axis.text.x = element_text(angle = 45, hjust =1))
```


#### Plot 4: Heatmap of Wind Speed by Hour and Weather Description

```{r}
# Collect data
wind_speed_data$hour <- format(wind_speed_data$time, "%H")

# Format data
heatmap_wind_data <- wind_speed_data %>%
  left_join(weather_desc_data2, by = "time") %>%
  group_by(hour, weather_description) %>%
  summarize(mean_wind_speed = mean(windspeed_10m, na.rm = TRUE)) %>%
  spread(weather_description, mean_wind_speed)

# Create matrix
heatmap_wind <- as.matrix(heatmap_wind_data[-1])
rownames(heatmap_wind) <- heatmap_wind_data$hour

# Convert matrix to long format
heatmap_wind_melted <- melt(heatmap_wind, varnames = c("Hour", "Weather Description"), value.name = "Mean_Wind_Speed")

# Plot heatmap
ggplot(heatmap_wind_melted, aes(x = Hour, y = Weather_Description, fill = Mean_Wind_Speed)) + geom_title() + scale_fill_gradient(low = "blue", high = "red", na.value = "white") + labs(title = "Heatmap of Mean Wind Speed by Hour and Weather Description", x = "Hour", y = "Weather Description", fill = "Mean Wind Speed (m/s)") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


# The App

```{r}
ui <- dashboardPage(
  dashboardHeader(title = "Open-Meteo API App"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("About", tabName = "About", icon = icon("info-circle")),
      menuItem("Data Download", tabName = "Data Download", icon = icon("download")),
      menuItem("Data Exploration", tabName = "Data Explore", icon = icon("chart-bar"))
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "About",
              fluidPage(
                titlePanel("About this App"),
                sidebarLayout(
                  sidebarPanel(
                    h4("App Purpose"),
                    p("This app allows users to query weather data from the Open-Meteo API, a public API."),
                    h4("Data Source"),
                    p("The data contained within this app comes from the Open-Meteo API, found ", a(href = "https://api.open-meteo.com/v1/forecast", "here"), "."),
                    h4("Each Tabs' Purpose"),
                    p("1. The purpose of the 'About' tab is to provide background information about this applicaiton."),
                    p("2. The purpose of the 'Data Download' tab is to query and download weather data."),
                    p("3. The purpose of the 'Data Exploration' tab is to further explore our weather data with graphical and numerical summaries."),
                    img(src = "", height = "100px")
                  ),
                  mainPanel()
                )
              )),
      tabItem(tabName = "download",
              fluidPage(
                titlePanel("Data Download"),
                sidebarLayout(
                  sidebarPanel(
                    numericInput("latitude", "Latitude", value = 30.2672),
                    numericInput("longitude", "Longitude", value = 97.7431),
                    dateInput("start_date", "Start Date", value = "2023-07-07"),
                    dateInput("end_date", "End Date", value = "2023-07-08"),
                    selectInput("data_type", "Data Type", choice = c("Current Weather", "Wind Speed", "Daily Weather", "Weather Condition", "Air Quality", "Weather Alerts")),
                    actionButton("query_data", "Query Data"),
                    br(),
                    downloadButton("download_data", "Download Data")
                  ),
                  mainPanel(
                    dataTableOutput("data_table")
                  )
                )
              )),
      tabItem(tabName = "explore",
              fluidPage(
                titlePanel("Data Exploration"),
                sidebarLayout(
                  sidebarPanel(
                    selectInput("variable_x", "X Variable", choices = NULL),
                    selectInput("variable_y", "Y Variable", choices = NULL),
                    selectInput("plot_type", "Plot Type", choices = c("Line Plot", "Box Plot", "Bar Plot", "Heatmap")),
                    actionButton("update_plot", "Update Plot")
                  ),
                  mainPanel(
                    plotOutput("plot")
                  )
                )
              ))
      )
    )
  )

server <- function(input, output, session) {
  data_reactive <- reactiveVal(NULL)
  
  observeEvent(input$query_data, {
    data <- switch(input$data_type,
                   "Current Weather" = get_current_weather(input$latitude, input$longitude),
                   "Wind Speed" = get_wind_speed(input$latitude, input$longitude, input$start_date, input$end_date),
                   "Daily Weather" = get_daily_forecast(input$latitude, input$longitude, input$start_date, input$end_date),
                   "Weather Condition" = get_weather_conditions(input$latitude, input$longitude, input$start_date, input$end_date),
                   "Air Quality" = get_air_quality(input$latitude, input$longitude),
                   "Weather Alerts" = get_weather_alerts(input$latitude, input$longitude))
    data_reactive(data)
  })
  
  output$data_table <- renderDataTable({
    data_reactive()
  })
  
  output$download_data <- downloadHandler(
    filename = function() { paste(input$data_type, ".csv", sep = "") },
    content = function(file) {
      write.csv(data_reactive(), file)
    }
  )
  
  observe({
    data <- data_reactive()
    if (!is.null(data)) {
      updateSelectInput(session, "variable_x", choices = names(data))
      updateSelectInput(session, "variable_y", choices = names(data))
    }
  })
  
  output$plot <- renderPlot({
    req(input$variable_x, input$variable_y)
    data <- data_reactive()
    
    p <- ggplot(data, aes_string(x = input$variable_x, y = input$variable_y))
    
    p <- switch(input$plot_type,
                "Line Plot" = p + geom_line(),
                "Box Plot" = p + geom_boxplot(),
                "Bar Plot" = p + geom_bar(stat = "identity"),
                "Heatmap" = {
                  data_long <- melt(data, id.vars = input$variable_x)
                  ggplot(data_long, aes_string(x = input$variable_x, y = "variable", fill = "value")) +
                    geom_tile() +
                    scale_fill_gradient(low = "blue", high = "red", na.rm = "white")
                })
  p + labs(title = paste(input$plot_type, "of", input$variable_y, "by", input$variable_x),
           x = input$variable_x,
           y = input$variable_y) +
    theme_minimal()
  })
}
```

```{r}
# Run the app
shinyApp(ui, server)
```
